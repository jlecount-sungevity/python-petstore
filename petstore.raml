#%RAML 0.8
title: Swagger Petstore
version: 1.0.0
documentation:
- title: Swagger Petstore
  content: |
    This is a sample server Petstore server.


    [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.


    For this sample, you can use the api key `special-key` to test the authorization filters
baseUri: http://petstore.swagger.io/v2
securitySchemes:
- auth:
    type: x-custom
    describedBy:
      headers:
        api_key:
          type: String
          default: 
          required: true
          displayName: api_key
schemas:
- Pet: |
    {
      "id": "Pet",
      "title": "Pet",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "photoUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "id": "Category",
          "title": "Category",
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "name": {
              "type": "string"
            }
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "id": "Tag",
            "title": "Tag",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "type": "string"
              }
            }
          }
        },
        "status": {
          "description": "pet status in the store",
          "type": "string"
        }
      },
      "required": [
        "name",
        "photoUrls"
      ]
    }
- Pet-array: |
    {
      "type": "array",
      "items": {
        "id": "Pet",
        "title": "Pet",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "photoUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "id": "Category",
            "title": "Category",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "id": "Tag",
              "title": "Tag",
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "status": {
            "description": "pet status in the store",
            "type": "string"
          }
        },
        "required": [
          "name",
          "photoUrls"
        ]
      }
    }
- Order: |
    {
      "id": "Order",
      "title": "Order",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "petId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "shipDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "Order Status",
          "type": "string"
        },
        "complete": {
          "type": "boolean"
        }
      }
    }
- User: |
    {
      "id": "User",
      "title": "User",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "description": "User Status",
          "type": "integer",
          "format": "int32"
        }
      }
    }
- User-array: |
    {
      "type": "array",
      "items": {
        "id": "User",
        "title": "User",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "description": "User Status",
            "type": "integer",
            "format": "int32"
          }
        }
      }
    }
/pets:
  /findByStatus:
    get:
      securedBy:
      - auth
      displayName: findPetsByStatus
      description: Finds Pets by status
      responses:
        200:
          description: successful operation
          body:
            application/json:
              schema: Pet-array
        400:
          description: Invalid status value
      queryParameters:
        status:
          description: Status values that need to be considered for filter
          type: string
          required: false
          displayName: status
  /findByTags:
    get:
      securedBy:
      - auth
      displayName: findPetsByTags
      description: Finds Pets by tags
      responses:
        200:
          description: successful operation
          body:
            application/json:
              schema: Pet-array
        400:
          description: Invalid tag value
      queryParameters:
        tags:
          description: Tags to filter by
          type: string
          required: false
          displayName: tags
  /{petId}:
    uriParameters:
      petId:
        description: ID of pet that needs to be fetched
        type: integer
        required: true
        displayName: petId
    get:
      securedBy:
      - auth
      displayName: getPetById
      description: Find pet by ID
      responses:
        200:
          description: successful operation
          body:
            application/json:
              schema: Pet
        404:
          description: Pet not found
        400:
          description: Invalid ID supplied
    post:
      securedBy:
      - auth
      displayName: updatePetWithForm
      description: Updates a pet in the store with form data
      responses:
        405:
          description: Invalid input
    delete:
      securedBy:
      - auth
      displayName: deletePet
      description: Deletes a pet
      responses:
        400:
          description: Invalid pet value
      headers:
        api_key:
          description: 
          type: string
          required: true
          displayName: api_key
  put:
    securedBy:
    - auth
    body:
      application/json:
        schema: Pet
    displayName: updatePet
    description: Update an existing pet
    responses:
      405:
        description: Validation exception
      404:
        description: Pet not found
      400:
        description: Invalid ID supplied
  post:
    securedBy:
    - auth
    body:
      application/json:
        schema: Pet
    displayName: addPet
    description: Add a new pet to the store
    responses:
      405:
        description: Invalid input
/stores/order:
  /{orderId}:
    uriParameters:
      orderId:
        description: ID of pet that needs to be fetched
        type: string
        required: true
        displayName: orderId
    get:
      securedBy:
      - auth
      displayName: getOrderById
      description: Find purchase order by ID
      responses:
        200:
          description: successful operation
          body:
            application/json:
              schema: Order
        404:
          description: Order not found
        400:
          description: Invalid ID supplied
    delete:
      securedBy:
      - auth
      displayName: deleteOrder
      description: Delete purchase order by ID
      responses:
        404:
          description: Order not found
        400:
          description: Invalid ID supplied
  post:
    securedBy:
    - auth
    body:
      application/json:
        schema: Order
    displayName: placeOrder
    description: Place an order for a pet
    responses:
      200:
        description: successful operation
        body:
          application/json:
            schema: Order
      400:
        description: Invalid Order
/users:
  /createWithArray:
    post:
      securedBy:
      - auth
      body:
        application/json:
          schema: User-array
      displayName: createUsersWithArrayInput
      description: Creates list of users with given input array
      responses:
        500:
          description: successful operation
  /createWithList:
    post:
      securedBy:
      - auth
      body:
        application/json:
          schema: User-array
      displayName: createUsersWithListInput
      description: Creates list of users with given input array
      responses:
        500:
          description: successful operation
  /login:
    get:
      securedBy:
      - auth
      displayName: loginUser
      description: Logs user into the system
      responses:
        200:
          description: successful operation
        400:
          description: Invalid username/password supplied
      queryParameters:
        username:
          description: The user name for login
          type: string
          required: false
          displayName: username
        password:
          description: The password for login in clear text
          type: string
          required: false
          displayName: password
  /logout:
    get:
      securedBy:
      - auth
      displayName: logoutUser
      description: Logs out current logged in user session
      responses:
        500:
          description: successful operation
  /{username}:
    uriParameters:
      username:
        description: The name that needs to be fetched. Use user1 for testing.
        type: string
        required: true
        displayName: username
    get:
      securedBy:
      - auth
      displayName: getUserByName
      description: Get user by user name
      responses:
        200:
          description: successful operation
          body:
            application/json:
              schema: User
        404:
          description: User not found
        400:
          description: Invalid username supplied
    put:
      securedBy:
      - auth
      body:
        application/json:
          schema: User
      displayName: updateUser
      description: Updated user
      responses:
        404:
          description: User not found
        400:
          description: Invalid user supplied
    delete:
      securedBy:
      - auth
      displayName: deleteUser
      description: Delete user
      responses:
        404:
          description: User not found
        400:
          description: Invalid username supplied
  post:
    securedBy:
    - auth
    body:
      application/json:
        schema: User
    displayName: createUser
    description: Create user
    responses:
      500:
        description: successful operation
